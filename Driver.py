import MLimport dhtimport machinefrom machine import RTCfrom machine import Timerimport ntptimeimport array  as arrglobal ca=arr.array('i',[10])b=arr.array('i',[23])rtc = RTC()ntptime.settime() # set the rtc datetime from the remote serverd=rtc.datetime()#give a tupple of the format similar belowrtc.datetime((2017, 8, 23, 1, 12, 48, 0, 0))# set a specific date and timedef ez(a,b,d):  d1 = dht.DHT11(machine.Pin(4))  c=d1.temperature()    c=c+1  if len(a)>=10:    a=a[1:]    b=b[1:]    b.append(c)    a.append(d[4])  else:    a.append(d[4])    b.append(c)  return a, b  def calc(o,l,d):  if (d[4]+1)>24:    a1=1  else:    a1=d[4]+1 #Adding 1 to predict the next hour  predicted_values=o+l*a1  return predicted_values    def Activate(a,b,d):  Time1,Temp=ez(a,b,d)  o1,l1=ML.linear_regression(Time1,Temp)  j=calc(o1,l1,d)  print(j)#use lcd function instead  tim = Timer(-1)tim.init(period=3600000, mode=Timer.PERIODIC, callback=lambda t: Activate(a,b,c,d))
